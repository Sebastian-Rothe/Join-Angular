// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use "@angular/material" as mat;

$primary-blue: #29abe2;
$dark-navy: #2a3647;
$background-light: #f6f7f8;
$border-color: #ccc;
$error-red: #ff8190;
$white: #ffffff;
$box-shadow-light: rgba(0, 0, 0, 0.08);
$box-shadow-hover: rgba(0, 0, 0, 0.3);

$border-radius-default: 8px;
$border-radius-large: 16px;
$border-radius-xl: 20px;

:root {
  --heading-font-size: 68px;

  @media (max-width: 1200px) {
    --heading-font-size: 60px;
  }

  @media (max-width: 900px) {
    --heading-font-size: 52px;
  }

  @media (max-width: 500px) {
    --heading-font-size: 44px;
  }

  @media (max-width: 400px) {
    --heading-font-size: 36px;
  }
}

html {
  @include mat.theme(
    (
      color: (
        theme-type: light,
        primary: mat.$azure-palette,
        tertiary: mat.$blue-palette,
      ),
      typography: Roboto,
      density: 0,
    )
  );
} /* You can add global styles to this file, and also import other style files */
button {
  cursor: pointer;
  border-radius: $border-radius-default;
  font-weight: 700;
  border: none;
  transition: all 0.2s ease-in-out;

  &:hover {
    box-shadow: 0 4px 4px $box-shadow-hover;
  }
}

// Button Base Placeholder
%button-base {
  font-size: 21px;
  font-weight: 700;
  border-radius: $border-radius-default;
  height: 48px;
  min-width: 110px;
  padding: 0 20px;
}

// Global Button Styles
.primary-btn {
  @extend %button-base;
  background-color: $dark-navy;
  color: $white;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;

  &:hover {
    background-color: $primary-blue;
    transform: scale(1.01);
    box-shadow: 0 4px 8px $box-shadow-hover;
  }

  mat-icon {
    font-size: 20px;
    width: 20px;
    height: 20px;
  }
}

.secondary-btn {
  @extend %button-base;
  background-color: $white;
  color: $dark-navy;
  border: 1px solid $dark-navy;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;

  &:hover {
    border-color: $primary-blue;
    color: $primary-blue;
    transform: scale(1.01);
    box-shadow: 0 4px 8px $box-shadow-light;

    mat-icon {
      color: $primary-blue;
    }
  }

  mat-icon {
    font-size: 20px;
    width: 20px;
    height: 20px;
    color: $dark-navy;
  }
}

// Responsive styles for buttons
@media (max-width: 768px) {
  .primary-btn,
  .secondary-btn {
    height: 40px;
    font-size: 18px;
    min-width: 90px;
    padding: 0 16px;
  }
}

@mixin hover-effect(
  $scale: 1.05,
  $shadow-color: rgba(0, 0, 0, 0.2),
  $shadow-spread: 10px,
  $transition-duration: 0.3s,
  $color: null,
  $background-color: $primary-blue
) {
  transition: all $transition-duration ease-in-out;

  &:hover {
    transform: scale($scale);
    box-shadow: 0 0 $shadow-spread $shadow-color;

    @if $color {
      color: $color;
    }

    @if $background-color {
      background-color: $background-color;
    }
  }
}

@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin input-base {
  border-radius: $border-radius-default;
  height: 48px;
  font-size: 20px;
  border: 1px solid $border-color;
  //   padding-left: 10px;
  padding: 0 12px;
  outline: none;

  &:focus {
    border-color: $primary-blue;
  }
}

/* Usage examples:

.button {
  @include hover-effect(
    $scale: 1.1,
    $shadow-color: rgba(0, 0, 0, 0.3),
    $color: #ffffff,
    $background-color: #007bff
  );
}

.card {
  @include hover-effect(
    $scale: 1.02,
    $shadow-spread: 15px
  );
}
*/

html,
body {
  height: 100%;
}
body {
  margin: 0;
  padding: 0;
  font-family: "Inter", sans-serif;
  overflow: hidden;
}

* {
  box-sizing: border-box;
}

@keyframes tooltipFadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, 10px);
  }
  to {
    opacity: 1;
    transform: translate(-50%, 0);
  }
}

// Custom tooltip for assigned users
.style-avatar-overlap {
  &[data-tooltip] {
    position: relative;

    &:hover::before {
      content: attr(data-tooltip);
      position: absolute;
      bottom: calc(100% + 15px);
      border-radius: 12px;

      left: 50%;
      transform: translateX(-50%);
      background: $dark-navy;
      color: $white;
      padding: 6px 12px;

      font-size: 13px;
      font-weight: 500;
      letter-spacing: 0.2px;
      white-space: nowrap;
      z-index: 1000;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.15);
      animation: tooltipFadeIn 0.25s cubic-bezier(0.4, 0, 0.2, 1);
      backdrop-filter: blur(4px);
    }

    &:hover::after {
      content: "";
      position: absolute;
      bottom: calc(100% + 4px);
      left: 50%;
      transform: translateX(-50%);
      border: 6px solid transparent;
      border-top: 6px solid $dark-navy;
      filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.1));
      animation: tooltipFadeIn 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }
}

// Slide animations
@keyframes slideInRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes slideOutRight {
  from {
    transform: translateX(0);
    opacity: 1;
  }
  to {
    transform: translateX(100%);
    opacity: 0;
  }
}

@keyframes slideInUp {
  from {
    transform: translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideOutDown {
  from {
    transform: translateY(0);
    opacity: 1;
  }
  to {
    transform: translateY(100%);
    opacity: 0;
  }
}

// Animation utility classes
.slide-in {
  animation: slideInRight 0.3s ease forwards;
}

.slide-out {
  animation: slideOutRight 0.3s ease forwards;
}

@media (max-width: 768px) {
  .slide-in {
    animation: slideInUp 0.3s ease forwards;
  }
  
  .slide-out {
    animation: slideOutDown 0.3s ease forwards;
  }
}

// Dialog Animations
.add-task-dialog {
  .mdc-dialog__surface {
    &.slide-in {
      animation: slideInRight 0.3s ease forwards;
    }
    
    &.slide-out {
      animation: slideOutRight 0.3s ease forwards;
    }
  }
}

@media (max-width: 768px) {
  .add-task-dialog .mdc-dialog__surface {
    &.slide-in {
      animation: slideInUp 0.3s ease forwards;
    }
    
    &.slide-out {
      animation: slideOutDown 0.3s ease forwards;
    }
  }
}

